name: 'CI checks'

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  tf_version: '0.12.30'

jobs:
  run-terraform-check:
    runs-on: [ ubuntu-latest ]
    # runs-on: [ self-hosted, devops, terraform ]

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Get all changed files'
        id: changed_files
        uses: jitterbit/get-changed-files@v1
      
      - name: 'Print out list of changed files'
        run: |
          for changed_file in ${{ steps.changed_files.outputs.all }}; do
            echo "Do something with this ${changed_file}."
          done

      - name: 'Prepare CI environment'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.tf_version }}

      - name: 'Run terraform format'
        id: fmt
        run: python scripts/helper.py run-terraform-fmt --check -f "${{ steps.changed_files.outputs.all }}"
        continue-on-error: true

      - name: 'Run terraform validate'
        id: validate
        run: python scripts/helper.py run-terraform-validate -f "${{ steps.changed_files.outputs.all }}"

      - name: 'Run terraform plan'
        id: plan
        run: python scripts/helper.py run-terraform-plan -f "${{ steps.changed_files.outputs.all }}"

      - name: 'Add comment on PR'
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' && (steps.fmt.outcome != 'success' || steps.validate.outcome != 'success' || steps.plan.outcome != 'success')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### Terraform Format and Style ðŸ–Œ  \`${{ steps.fmt.outcome }}\`
            #### Terraform Validation ðŸ¤–  \`${{ steps.validate.outcome }}\`
            #### Terraform Plan ðŸ“–  \`${{ steps.plan.outcome }}\`
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
